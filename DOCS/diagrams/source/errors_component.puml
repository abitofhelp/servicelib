@startuml Error Handling System

skinparam componentStyle uml2
skinparam component {
  BackgroundColor White
  BorderColor Black
  ArrowColor Black
}

package "errors" as errors {
  package "core" as core {
    class "BaseError" as BaseError {
      +Code: ErrorCode
      +Message: string
      +Operation: string
      +Details: map[string]interface{}
      +Cause: error
      +Source: string
      +Line: int
      +Error(): string
      +Unwrap(): error
      +GetCode(): ErrorCode
      +GetMessage(): string
      +GetOperation(): string
      +GetDetails(): map[string]interface{}
      +GetCause(): error
      +GetSource(): string
      +GetLine(): int
      +GetHTTPStatus(): int
      +WithOperation(operation string): *BaseError
      +WithDetails(details map[string]interface{}): *BaseError
      +Is(target error): bool
      +As(target interface{}): bool
    }

    enum "ErrorCode" as ErrorCode {
      +NotFoundCode
      +InvalidInputCode
      +DatabaseErrorCode
      +InternalErrorCode
      +TimeoutCode
      +CanceledCode
      +AlreadyExistsCode
      +UnauthorizedCode
      +ForbiddenCode
      +ValidationErrorCode
      +BusinessRuleViolationCode
      +ExternalServiceErrorCode
      +NetworkErrorCode
      +ConfigurationErrorCode
      +ResourceExhaustedCode
      +DataCorruptionCode
      +ConcurrencyErrorCode
    }
  }

  package "domain" as domain {
    class "DomainError" as DomainError {
      +IsDomainError(): bool
    }

    class "ValidationError" as ValidationError {
      +Field: string
      +IsValidationError(): bool
    }

    class "ValidationErrors" as ValidationErrors {
      +Errors: []*ValidationError
      +AddError(err *ValidationError)
      +HasErrors(): bool
    }

    class "BusinessRuleError" as BusinessRuleError {
      +Rule: string
      +IsBusinessRuleError(): bool
    }

    class "NotFoundError" as NotFoundError {
      +ResourceType: string
      +ResourceID: string
      +IsNotFoundError(): bool
    }
  }

  package "app" as app {
    class "ApplicationError" as ApplicationError {
      +IsApplicationError(): bool
    }

    class "ConfigurationError" as ConfigurationError {
      +ConfigKey: string
      +ConfigValue: string
      +IsConfigurationError(): bool
    }

    class "AuthenticationError" as AuthenticationError {
      +Username: string
      +IsAuthenticationError(): bool
    }

    class "AuthorizationError" as AuthorizationError {
      +Username: string
      +Resource: string
      +Action: string
      +IsAuthorizationError(): bool
    }
  }

  package "infra" as infra {
    class "InfrastructureError" as InfrastructureError {
      +IsInfrastructureError(): bool
    }

    class "DatabaseError" as DatabaseError {
      +Operation: string
      +Table: string
      +IsDatabaseError(): bool
    }

    class "NetworkError" as NetworkError {
      +Host: string
      +Port: string
      +IsNetworkError(): bool
    }

    class "ExternalServiceError" as ExternalServiceError {
      +ServiceName: string
      +Endpoint: string
      +IsExternalServiceError(): bool
    }
  }
}

' Relationships
DomainError --|> BaseError
ValidationError --|> DomainError
ValidationErrors --|> DomainError
BusinessRuleError --|> DomainError
NotFoundError --|> DomainError

ApplicationError --|> BaseError
ConfigurationError --|> ApplicationError
AuthenticationError --|> ApplicationError
AuthorizationError --|> ApplicationError

InfrastructureError --|> BaseError
DatabaseError --|> InfrastructureError
NetworkError --|> InfrastructureError
ExternalServiceError --|> InfrastructureError

@enduml