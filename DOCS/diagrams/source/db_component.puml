@startuml Database Component

skinparam componentStyle uml2
skinparam class {
  BackgroundColor White
  BorderColor Black
  ArrowColor Black
}

package "Database" {
  class "PostgresConfig" as PostgresConfig {
    + Host: string
    + Port: int
    + User: string
    + Password: string
    + Database: string
    + MaxConns: int32
    + MinConns: int32
    + MaxConnLifetime: time.Duration
    + MaxConnIdleTime: time.Duration
    + HealthCheckPeriod: time.Duration
  }

  class "RetryConfig" as RetryConfig {
    + MaxRetries: int
    + InitialBackoff: time.Duration
    + MaxBackoff: time.Duration
    + BackoffFactor: float64
    + Logger: *logging.ContextLogger
  }

  interface "SQLDBInterface" as SQLDBInterface {
    + PingContext(ctx): error
    + ExecContext(ctx, query, args): (sql.Result, error)
    + QueryContext(ctx, query, args): (*sql.Rows, error)
    + QueryRowContext(ctx, query, args): *sql.Row
    + BeginTx(ctx, opts): (*sql.Tx, error)
  }

  interface "MongoClientInterface" as MongoClientInterface {
    + Ping(ctx, opts): error
    + Database(name): *mongo.Database
    + Connect(ctx): error
    + Disconnect(ctx): error
  }

  interface "PgxPoolInterface" as PgxPoolInterface {
    + Ping(ctx): error
    + Exec(ctx, query, args): (pgconn.CommandTag, error)
    + Query(ctx, query, args): (pgx.Rows, error)
    + QueryRow(ctx, query, args): pgx.Row
    + Begin(ctx): (pgx.Tx, error)
  }

  class "Database Functions" as DBFunctions {
    + InitPostgresPool(ctx, config): (*pgxpool.Pool, error)
    + InitMongoClient(ctx, uri, timeout): (*mongo.Client, error)
    + InitSQLiteDB(ctx, uri, timeout, connMaxLifetime, maxOpenConns, maxIdleConns): (*sql.DB, error)
    + CheckPostgresHealth(ctx, pool): error
    + CheckMongoHealth(ctx, client): error
    + CheckSQLiteHealth(ctx, db): error
    + ExecutePostgresTransaction(ctx, pool, fn, retryConfig): error
    + ExecuteSQLTransaction(ctx, db, fn, retryConfig): error
    + IsTransientError(err): bool
    + DefaultRetryConfig(): RetryConfig
  }
}

DBFunctions --> PostgresConfig: uses
DBFunctions --> RetryConfig: uses
DBFunctions --> SQLDBInterface: implements checks for
DBFunctions --> MongoClientInterface: implements checks for
DBFunctions --> PgxPoolInterface: implements checks for

@enduml