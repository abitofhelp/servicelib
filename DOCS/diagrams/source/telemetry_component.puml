@startuml Telemetry Component

skinparam componentStyle uml2
skinparam class {
  BackgroundColor White
  BorderColor Black
  ArrowColor Black
}

package "Telemetry" {
  class "TelemetryProvider" as TelemetryProvider {
    - config: Config
    - logger: *logging.ContextLogger
    - tracer: trace.Tracer
    - meter: metric.Meter
    + NewTelemetryProvider(ctx, logger, k): (*TelemetryProvider, error)
    + Shutdown(ctx): error
    + Tracer(): trace.Tracer
    + Meter(): metric.Meter
    + CreatePrometheusHandler(): http.Handler
    + InstrumentHandler(handler, operation): http.Handler
  }

  class "Config" as Config {
    + Enabled: bool
    + ServiceName: string
    + Environment: string
    + Version: string
    + ShutdownTimeout: int
    + OTLP: OTLPConfig
    + Tracing: TracingConfig
    + Metrics: MetricsConfig
    + Prometheus: PrometheusConfig
    + HTTP: HTTPConfig
  }

  class "MetricsProvider" as MetricsProvider {
    - httpRequestsTotal: metric.Int64Counter
    - httpRequestDuration: metric.Float64Histogram
    - httpRequestsInFlight: metric.Int64UpDownCounter
    - httpResponseSizeBytes: metric.Int64Histogram
    - dbOperationsTotal: metric.Int64Counter
    - dbOperationDuration: metric.Float64Histogram
    - dbConnectionsOpen: metric.Int64UpDownCounter
    - appErrorsTotal: metric.Int64Counter
    + RecordHTTPRequest(ctx, method, path, status, duration, bytes)
    + RecordDBOperation(ctx, operation, success, duration)
    + IncrementDBConnections(ctx, database)
    + DecrementDBConnections(ctx, database)
    + RecordError(ctx, code, message)
  }

  interface "Tracer" as Tracer {
    + Start(ctx, name, opts): (context.Context, Span)
  }

  interface "Span" as Span {
    + End(opts)
    + SetAttributes(attrs)
    + AddEvent(name, attrs)
    + SetStatus(code, description)
    + RecordError(err, opts)
    + SpanContext(): trace.SpanContext
    + IsRecording(): bool
    + TracerProvider(): trace.TracerProvider
  }

  class "Telemetry Functions" as TelemetryFunctions {
    + InstrumentHandler(handler, operation, opts): http.Handler
    + InstrumentClient(client, opts): *http.Client
    + StartSpan(ctx, name, opts): (context.Context, trace.Span)
    + GetSpanFromContext(ctx): trace.Span
    + AddSpanAttributes(ctx, attrs)
    + RecordHTTPRequest(ctx, method, path, status, duration, bytes)
    + RecordDBOperation(ctx, operation, success, duration)
    + RecordError(ctx, code, message)
  }
}

TelemetryProvider --> Config: uses
TelemetryProvider --> Tracer: provides
TelemetryProvider --> MetricsProvider: uses
TelemetryFunctions --> TelemetryProvider: uses
TelemetryFunctions --> Span: creates
Tracer --> Span: creates

note right of TelemetryProvider
  The telemetry package provides functionality for 
  monitoring and tracing application behavior using 
  OpenTelemetry and Prometheus. It includes support 
  for distributed tracing, metrics collection, and 
  HTTP instrumentation.
end note

@enduml