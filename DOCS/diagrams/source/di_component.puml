@startuml Dependency Injection Component

skinparam componentStyle uml2
skinparam class {
  BackgroundColor White
  BorderColor Black
  ArrowColor Black
}

class "BaseContainer<C>" as BaseContainer {
  - ctx: context.Context
  - logger: *zap.Logger
  - contextLogger: *logging.ContextLogger
  - validator: *validator.Validate
  - config: C
  + NewBaseContainer(ctx, logger, cfg): (*BaseContainer, error)
  + GetContext(): context.Context
  + GetLogger(): *zap.Logger
  + GetContextLogger(): *logging.ContextLogger
  + GetValidator(): *validator.Validate
  + GetConfig(): C
  + Close(): error
}

class Container {
  - BaseContainer<interface{}>
  + NewContainer(ctx, logger, cfg): (*Container, error)
  + GetRepositoryFactory(): interface{}
}

class ServiceContainer {
  - BaseContainer<Config>
  + NewServiceContainer(ctx, logger, cfg): (*ServiceContainer, error)
  + GetService(): Service
}

class RepositoryContainer {
  - BaseContainer<Config>
  + NewRepositoryContainer(ctx, logger, cfg): (*RepositoryContainer, error)
  + GetRepository(): Repository
}

Container --|> BaseContainer
ServiceContainer --|> BaseContainer
RepositoryContainer --|> BaseContainer

@enduml