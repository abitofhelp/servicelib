@startuml Middleware Component

skinparam componentStyle uml2
skinparam class {
  BackgroundColor White
  BorderColor Black
  ArrowColor Black
}

package "Middleware" {
  class "Middleware" as Middleware {
    + func(http.Handler) http.Handler
  }

  class "Chain" as Chain {
    + Chain(handler, middlewares...): http.Handler
  }

  class "Context Utilities" as ContextUtils {
    + RequestIDKey: ContextKey
    + StartTimeKey: ContextKey
    + generateRequestID(): string
    + RequestID(ctx): string
    + StartTime(ctx): time.Time
    + RequestDuration(ctx): time.Duration
  }

  class "Response Writers" as ResponseWriters {
    + responseWriter: struct
    + syncResponseWriter: struct
    + errorResponseWriter: struct
  }

  class "Middleware Functions" as MiddlewareFunctions {
    + WithRequestContext(handler): http.Handler
    + WithTimeout(timeout, handler): http.Handler
    + WithRecovery(logger, handler): http.Handler
    + WithLogging(logger, handler): http.Handler
    + WithErrorHandling(handler): http.Handler
    + WithCORS(handler): http.Handler
    + WithContextCancellation(handler): http.Handler
    + ApplyMiddleware(handler, logger): http.Handler
  }
}

Chain --> Middleware: uses
MiddlewareFunctions --> ResponseWriters: uses
MiddlewareFunctions --> ContextUtils: uses
MiddlewareFunctions --> Middleware: implements

note right of Middleware
  The middleware package provides HTTP middleware components 
  for common cross-cutting concerns in Go applications. 
  
  Middleware functions can be composed to create a processing 
  pipeline for HTTP requests, handling concerns such as logging, 
  error handling, request context, timeouts, recovery from panics, 
  and CORS.
end note

@enduml