// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
)

// MockSQLDBInterface is a mock of SQLDBInterface interface.
type MockSQLDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSQLDBInterfaceMockRecorder
}

// MockSQLDBInterfaceMockRecorder is the mock recorder for MockSQLDBInterface.
type MockSQLDBInterfaceMockRecorder struct {
	mock *MockSQLDBInterface
}

// NewMockSQLDBInterface creates a new mock instance.
func NewMockSQLDBInterface(ctrl *gomock.Controller) *MockSQLDBInterface {
	mock := &MockSQLDBInterface{ctrl: ctrl}
	mock.recorder = &MockSQLDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLDBInterface) EXPECT() *MockSQLDBInterfaceMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockSQLDBInterface) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockSQLDBInterfaceMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockSQLDBInterface)(nil).BeginTx), ctx, opts)
}

// PingContext mocks base method.
func (m *MockSQLDBInterface) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockSQLDBInterfaceMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockSQLDBInterface)(nil).PingContext), ctx)
}

// SetConnMaxLifetime mocks base method.
func (m *MockSQLDBInterface) SetConnMaxLifetime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", d)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockSQLDBInterfaceMockRecorder) SetConnMaxLifetime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockSQLDBInterface)(nil).SetConnMaxLifetime), d)
}

// SetMaxIdleConns mocks base method.
func (m *MockSQLDBInterface) SetMaxIdleConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", n)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockSQLDBInterfaceMockRecorder) SetMaxIdleConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockSQLDBInterface)(nil).SetMaxIdleConns), n)
}

// SetMaxOpenConns mocks base method.
func (m *MockSQLDBInterface) SetMaxOpenConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", n)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockSQLDBInterfaceMockRecorder) SetMaxOpenConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockSQLDBInterface)(nil).SetMaxOpenConns), n)
}

// MockSQLTxInterface is a mock of SQLTxInterface interface.
type MockSQLTxInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSQLTxInterfaceMockRecorder
}

// MockSQLTxInterfaceMockRecorder is the mock recorder for MockSQLTxInterface.
type MockSQLTxInterfaceMockRecorder struct {
	mock *MockSQLTxInterface
}

// NewMockSQLTxInterface creates a new mock instance.
func NewMockSQLTxInterface(ctrl *gomock.Controller) *MockSQLTxInterface {
	mock := &MockSQLTxInterface{ctrl: ctrl}
	mock.recorder = &MockSQLTxInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLTxInterface) EXPECT() *MockSQLTxInterfaceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSQLTxInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSQLTxInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSQLTxInterface)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockSQLTxInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSQLTxInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSQLTxInterface)(nil).Rollback))
}

// MockMongoClientInterface is a mock of MongoClientInterface interface.
type MockMongoClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientInterfaceMockRecorder
}

// MockMongoClientInterfaceMockRecorder is the mock recorder for MockMongoClientInterface.
type MockMongoClientInterfaceMockRecorder struct {
	mock *MockMongoClientInterface
}

// NewMockMongoClientInterface creates a new mock instance.
func NewMockMongoClientInterface(ctrl *gomock.Controller) *MockMongoClientInterface {
	mock := &MockMongoClientInterface{ctrl: ctrl}
	mock.recorder = &MockMongoClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClientInterface) EXPECT() *MockMongoClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoClientInterface) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoClientInterfaceMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoClientInterface)(nil).Connect), ctx)
}

// Database mocks base method.
func (m *MockMongoClientInterface) Database(name string, opts ...*options.DatabaseOptions) *mongo.Database {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoClientInterfaceMockRecorder) Database(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoClientInterface)(nil).Database), varargs...)
}

// Ping mocks base method.
func (m *MockMongoClientInterface) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, rp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMongoClientInterfaceMockRecorder) Ping(ctx, rp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoClientInterface)(nil).Ping), ctx, rp)
}

// MockPgxPoolInterface is a mock of PgxPoolInterface interface.
type MockPgxPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxPoolInterfaceMockRecorder
}

// MockPgxPoolInterfaceMockRecorder is the mock recorder for MockPgxPoolInterface.
type MockPgxPoolInterfaceMockRecorder struct {
	mock *MockPgxPoolInterface
}

// NewMockPgxPoolInterface creates a new mock instance.
func NewMockPgxPoolInterface(ctrl *gomock.Controller) *MockPgxPoolInterface {
	mock := &MockPgxPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPgxPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxPoolInterface) EXPECT() *MockPgxPoolInterfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockPgxPoolInterface) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPgxPoolInterfaceMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPgxPoolInterface)(nil).Begin), ctx)
}

// Close mocks base method.
func (m *MockPgxPoolInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPgxPoolInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxPoolInterface)(nil).Close))
}

// Ping mocks base method.
func (m *MockPgxPoolInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPgxPoolInterfaceMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPgxPoolInterface)(nil).Ping), ctx)
}

// MockPgxTxInterface is a mock of PgxTxInterface interface.
type MockPgxTxInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxTxInterfaceMockRecorder
}

// MockPgxTxInterfaceMockRecorder is the mock recorder for MockPgxTxInterface.
type MockPgxTxInterfaceMockRecorder struct {
	mock *MockPgxTxInterface
}

// NewMockPgxTxInterface creates a new mock instance.
func NewMockPgxTxInterface(ctrl *gomock.Controller) *MockPgxTxInterface {
	mock := &MockPgxTxInterface{ctrl: ctrl}
	mock.recorder = &MockPgxTxInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxTxInterface) EXPECT() *MockPgxTxInterfaceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockPgxTxInterface) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPgxTxInterfaceMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPgxTxInterface)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockPgxTxInterface) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockPgxTxInterfaceMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockPgxTxInterface)(nil).Rollback), ctx)
}
