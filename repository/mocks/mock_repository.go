// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abitofhelp/servicelib/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStringRepository is a mock of Repository interface for string entities.
type MockStringRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStringRepositoryMockRecorder
}

// MockStringRepositoryMockRecorder is the mock recorder for MockStringRepository.
type MockStringRepositoryMockRecorder struct {
	mock *MockStringRepository
}

// NewMockStringRepository creates a new mock instance.
func NewMockStringRepository(ctrl *gomock.Controller) *MockStringRepository {
	mock := &MockStringRepository{ctrl: ctrl}
	mock.recorder = &MockStringRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringRepository) EXPECT() *MockStringRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockStringRepository) GetByID(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStringRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStringRepository)(nil).GetByID), ctx, id)
}

// GetAll mocks base method.
func (m *MockStringRepository) GetAll(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStringRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStringRepository)(nil).GetAll), ctx)
}

// Save mocks base method.
func (m *MockStringRepository) Save(ctx context.Context, entity string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStringRepositoryMockRecorder) Save(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStringRepository)(nil).Save), ctx, entity)
}

// MockRepositoryFactory is a mock of RepositoryFactory interface.
type MockRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryFactoryMockRecorder
}

// MockRepositoryFactoryMockRecorder is the mock recorder for MockRepositoryFactory.
type MockRepositoryFactoryMockRecorder struct {
	mock *MockRepositoryFactory
}

// NewMockRepositoryFactory creates a new mock instance.
func NewMockRepositoryFactory(ctrl *gomock.Controller) *MockRepositoryFactory {
	mock := &MockRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryFactory) EXPECT() *MockRepositoryFactoryMockRecorder {
	return m.recorder
}

// GetRepository mocks base method.
func (m *MockRepositoryFactory) GetRepository() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRepositoryFactoryMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRepositoryFactory)(nil).GetRepository))
}
