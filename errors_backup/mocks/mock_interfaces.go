// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abitofhelp/servicelib/errors (interfaces: ErrorWithCode,ErrorWithHTTPStatus,ValidationErrorInterface,NotFoundErrorInterface,ApplicationErrorInterface,RepositoryErrorInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrorWithCode is a mock of ErrorWithCode interface.
type MockErrorWithCode struct {
	ctrl     *gomock.Controller
	recorder *MockErrorWithCodeMockRecorder
}

// MockErrorWithCodeMockRecorder is the mock recorder for MockErrorWithCode.
type MockErrorWithCodeMockRecorder struct {
	mock *MockErrorWithCode
}

// NewMockErrorWithCode creates a new mock instance.
func NewMockErrorWithCode(ctrl *gomock.Controller) *MockErrorWithCode {
	mock := &MockErrorWithCode{ctrl: ctrl}
	mock.recorder = &MockErrorWithCodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorWithCode) EXPECT() *MockErrorWithCodeMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockErrorWithCode) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockErrorWithCodeMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockErrorWithCode)(nil).Code))
}

// Error mocks base method.
func (m *MockErrorWithCode) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockErrorWithCodeMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorWithCode)(nil).Error))
}

// MockErrorWithHTTPStatus is a mock of ErrorWithHTTPStatus interface.
type MockErrorWithHTTPStatus struct {
	ctrl     *gomock.Controller
	recorder *MockErrorWithHTTPStatusMockRecorder
}

// MockErrorWithHTTPStatusMockRecorder is the mock recorder for MockErrorWithHTTPStatus.
type MockErrorWithHTTPStatusMockRecorder struct {
	mock *MockErrorWithHTTPStatus
}

// NewMockErrorWithHTTPStatus creates a new mock instance.
func NewMockErrorWithHTTPStatus(ctrl *gomock.Controller) *MockErrorWithHTTPStatus {
	mock := &MockErrorWithHTTPStatus{ctrl: ctrl}
	mock.recorder = &MockErrorWithHTTPStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorWithHTTPStatus) EXPECT() *MockErrorWithHTTPStatusMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockErrorWithHTTPStatus) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockErrorWithHTTPStatusMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorWithHTTPStatus)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockErrorWithHTTPStatus) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockErrorWithHTTPStatusMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockErrorWithHTTPStatus)(nil).HTTPStatus))
}

// MockValidationErrorInterface is a mock of ValidationErrorInterface interface.
type MockValidationErrorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValidationErrorInterfaceMockRecorder
}

// MockValidationErrorInterfaceMockRecorder is the mock recorder for MockValidationErrorInterface.
type MockValidationErrorInterfaceMockRecorder struct {
	mock *MockValidationErrorInterface
}

// NewMockValidationErrorInterface creates a new mock instance.
func NewMockValidationErrorInterface(ctrl *gomock.Controller) *MockValidationErrorInterface {
	mock := &MockValidationErrorInterface{ctrl: ctrl}
	mock.recorder = &MockValidationErrorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationErrorInterface) EXPECT() *MockValidationErrorInterfaceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockValidationErrorInterface) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockValidationErrorInterfaceMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockValidationErrorInterface)(nil).Code))
}

// Error mocks base method.
func (m *MockValidationErrorInterface) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockValidationErrorInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockValidationErrorInterface)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockValidationErrorInterface) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockValidationErrorInterfaceMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockValidationErrorInterface)(nil).HTTPStatus))
}

// IsValidationError mocks base method.
func (m *MockValidationErrorInterface) IsValidationError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidationError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidationError indicates an expected call of IsValidationError.
func (mr *MockValidationErrorInterfaceMockRecorder) IsValidationError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidationError", reflect.TypeOf((*MockValidationErrorInterface)(nil).IsValidationError))
}

// MockNotFoundErrorInterface is a mock of NotFoundErrorInterface interface.
type MockNotFoundErrorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotFoundErrorInterfaceMockRecorder
}

// MockNotFoundErrorInterfaceMockRecorder is the mock recorder for MockNotFoundErrorInterface.
type MockNotFoundErrorInterfaceMockRecorder struct {
	mock *MockNotFoundErrorInterface
}

// NewMockNotFoundErrorInterface creates a new mock instance.
func NewMockNotFoundErrorInterface(ctrl *gomock.Controller) *MockNotFoundErrorInterface {
	mock := &MockNotFoundErrorInterface{ctrl: ctrl}
	mock.recorder = &MockNotFoundErrorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotFoundErrorInterface) EXPECT() *MockNotFoundErrorInterfaceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockNotFoundErrorInterface) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockNotFoundErrorInterfaceMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockNotFoundErrorInterface)(nil).Code))
}

// Error mocks base method.
func (m *MockNotFoundErrorInterface) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockNotFoundErrorInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockNotFoundErrorInterface)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockNotFoundErrorInterface) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockNotFoundErrorInterfaceMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockNotFoundErrorInterface)(nil).HTTPStatus))
}

// IsNotFoundError mocks base method.
func (m *MockNotFoundErrorInterface) IsNotFoundError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MockNotFoundErrorInterfaceMockRecorder) IsNotFoundError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MockNotFoundErrorInterface)(nil).IsNotFoundError))
}

// MockApplicationErrorInterface is a mock of ApplicationErrorInterface interface.
type MockApplicationErrorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationErrorInterfaceMockRecorder
}

// MockApplicationErrorInterfaceMockRecorder is the mock recorder for MockApplicationErrorInterface.
type MockApplicationErrorInterfaceMockRecorder struct {
	mock *MockApplicationErrorInterface
}

// NewMockApplicationErrorInterface creates a new mock instance.
func NewMockApplicationErrorInterface(ctrl *gomock.Controller) *MockApplicationErrorInterface {
	mock := &MockApplicationErrorInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationErrorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationErrorInterface) EXPECT() *MockApplicationErrorInterfaceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockApplicationErrorInterface) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockApplicationErrorInterfaceMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockApplicationErrorInterface)(nil).Code))
}

// Error mocks base method.
func (m *MockApplicationErrorInterface) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockApplicationErrorInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockApplicationErrorInterface)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockApplicationErrorInterface) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockApplicationErrorInterfaceMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockApplicationErrorInterface)(nil).HTTPStatus))
}

// IsApplicationError mocks base method.
func (m *MockApplicationErrorInterface) IsApplicationError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApplicationError indicates an expected call of IsApplicationError.
func (mr *MockApplicationErrorInterfaceMockRecorder) IsApplicationError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationError", reflect.TypeOf((*MockApplicationErrorInterface)(nil).IsApplicationError))
}

// MockRepositoryErrorInterface is a mock of RepositoryErrorInterface interface.
type MockRepositoryErrorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryErrorInterfaceMockRecorder
}

// MockRepositoryErrorInterfaceMockRecorder is the mock recorder for MockRepositoryErrorInterface.
type MockRepositoryErrorInterfaceMockRecorder struct {
	mock *MockRepositoryErrorInterface
}

// NewMockRepositoryErrorInterface creates a new mock instance.
func NewMockRepositoryErrorInterface(ctrl *gomock.Controller) *MockRepositoryErrorInterface {
	mock := &MockRepositoryErrorInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryErrorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryErrorInterface) EXPECT() *MockRepositoryErrorInterfaceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockRepositoryErrorInterface) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockRepositoryErrorInterfaceMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockRepositoryErrorInterface)(nil).Code))
}

// Error mocks base method.
func (m *MockRepositoryErrorInterface) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockRepositoryErrorInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRepositoryErrorInterface)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockRepositoryErrorInterface) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockRepositoryErrorInterfaceMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockRepositoryErrorInterface)(nil).HTTPStatus))
}

// IsRepositoryError mocks base method.
func (m *MockRepositoryErrorInterface) IsRepositoryError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRepositoryError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRepositoryError indicates an expected call of IsRepositoryError.
func (mr *MockRepositoryErrorInterfaceMockRecorder) IsRepositoryError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRepositoryError", reflect.TypeOf((*MockRepositoryErrorInterface)(nil).IsRepositoryError))
}
