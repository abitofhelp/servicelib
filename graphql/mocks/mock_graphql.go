// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/99designs/gqlgen/graphql (interfaces: ExecutableSchema)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	gomock "github.com/golang/mock/gomock"
	ast "github.com/vektah/gqlparser/v2/ast"
)

// MockExecutableSchema is a mock of ExecutableSchema interface.
type MockExecutableSchema struct {
	ctrl     *gomock.Controller
	recorder *MockExecutableSchemaMockRecorder
}

// MockExecutableSchemaMockRecorder is the mock recorder for MockExecutableSchema.
type MockExecutableSchemaMockRecorder struct {
	mock *MockExecutableSchema
}

// NewMockExecutableSchema creates a new mock instance.
func NewMockExecutableSchema(ctrl *gomock.Controller) *MockExecutableSchema {
	mock := &MockExecutableSchema{ctrl: ctrl}
	mock.recorder = &MockExecutableSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutableSchema) EXPECT() *MockExecutableSchemaMockRecorder {
	return m.recorder
}

// Complexity mocks base method.
func (m *MockExecutableSchema) Complexity(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 map[string]interface{}) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complexity", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Complexity indicates an expected call of Complexity.
func (mr *MockExecutableSchemaMockRecorder) Complexity(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complexity", reflect.TypeOf((*MockExecutableSchema)(nil).Complexity), arg0, arg1, arg2, arg3, arg4)
}

// Exec mocks base method.
func (m *MockExecutableSchema) Exec(arg0 context.Context) graphql.ResponseHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(graphql.ResponseHandler)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockExecutableSchemaMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecutableSchema)(nil).Exec), arg0)
}

// Schema mocks base method.
func (m *MockExecutableSchema) Schema() *ast.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(*ast.Schema)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockExecutableSchemaMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockExecutableSchema)(nil).Schema))
}
